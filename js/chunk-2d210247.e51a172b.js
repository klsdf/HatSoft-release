(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d210247"],{b740:function(n,e,t){"use strict";t.r(e);var r=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",[t("markdown-it-vue",{staticClass:"md-body",attrs:{content:n.content}})],1)},o=[],i=t("48cd"),s=t.n(i),l=(t("f417"),'\n# 基本样式\n\n## 文字相关\n\n### 文字颜色\n\n```css\ncolor: black;\n```\n\n颜色请参考我的颜色对照表\n\n### 文本对齐\n\n```css\ntext-align:center;\n```\n\n| 值      | 描述                                        |\n| ------- | ------------------------------------------- |\n| left    | 把文本排列到左边。                          |\n| right   | 把文本排列到右边。                          |\n| center  | 把文本排列到中间。                          |\n| justify | 实现两端对齐文本效果。                      |\n| inherit | 规定应该从父元素继承 text-align 属性的值。 |\n\n### 下划线\n\n```css\ntext-decoration:none;\n```\n\n| 值            | 描述                                             |\n| ------------- | ------------------------------------------------ |\n| none          | 默认。定义标准的文本。                           |\n| underline     | 定义文本下的一条线。                             |\n| overline      | 定义文本上的一条线。                             |\n| line-through | 定义穿过文本下的一条线。                         |\n| blink         | 定义闪烁的文本。                                 |\n| inherit       | 规定应该从父元素继承 text-decoration 属性的值。 |\n\n### 行高\n\n```css\nline-height:20px;\n```\n\n| 值      | 描述                                                 |\n| ------- | ---------------------------------------------------- |\n| normal  | 默认。设置合理的行间距。                             |\n| 某数字  | 设置数字，此数字会与当前的字体尺寸相乘来设置行间距。 |\n| 某某px  | 设置固定的行间距。                                   |\n| %       | 基于当前字体尺寸的百分比行间距。                     |\n| inherit | 规定应该从父元素继承 line-height 属性的值。         |\n\n### 文字阴影\n\n```css\ntext-shadow: 10px 5px 2px #FF0000;\n```\n\n| 参数       | 描述                                   |\n| ---------- | -------------------------------------- |\n| 第一个参数 | 必需。阴影离文字的水平距离。允许负值。 |\n| 第二个参数 | 必需。阴影离文字的垂直距离。允许负值。 |\n| 第三个参数 | 可选。代表这个阴影有多模糊。           |\n| 第四个参数 | 可选。阴影的颜色。                     |\n\n## 背景相关\n\n### 背景颜色\n\n```css\nbackground-color: gray;\nbackground-color: #bfc;\n```\n\n### 背景图片\n\n```css\nbackground-image:url("");\n```\n\n### 背景图片重复\n\n```css\nbackground-repeat:no-repeat;\n```\n\n| 值         | 描述                                                 |\n| ---------- | ---------------------------------------------------- |\n| repeat     | 默认。背景图像将在垂直方向和水平方向重复。           |\n| repeat-x  | 背景图像将在水平方向重复。                           |\n| repeat-y  | 背景图像将在垂直方向重复。                           |\n| no-repeat | 背景图像将仅显示一次。                               |\n| inherit    | 规定应该从父元素继承 background-repeat 属性的设置。 |\n\n\n### 背景开始的位置\n\n设置background-attachment:fixed;才能兼容 Firefox 和 Opera 浏览器\n\n```css\nbackground-attachment:fixed;\nbackground-position:center;\n```\n\n<table>\n  <tbody>\n    <tr>\n      <th>值</th>\n      <th>描述</th>\n    </tr>\n    <tr>\n      <td>\n        <ul>\n          <li>top left</li>\n          <li>top center</li>\n          <li>top right</li>\n          <li>center left</li>\n          <li>center center</li>\n          <li>center right</li>\n          <li>bottom left</li>\n          <li>bottom center</li>\n          <li>bottom right</li>\n        </ul>\n      </td>\n      <td>\n        <p>如果您仅规定了一个关键词，那么第二个值将是"center"。</p>\n        <p>默认值：0% 0%。</p>\n      </td>\n    </tr>\n    <tr>\n      <td>x% y%</td>\n      <td>\n        <p>第一个值是水平位置，第二个值是垂直位置。</p>\n        <p>左上角是 0% 0%。右下角是 100% 100%。</p>\n        <p>如果您仅规定了一个值，另一个值将是 50%。</p>\n      </td>\n    </tr>\n    <tr>\n      <td>xpos ypos</td>\n      <td>\n        <p>第一个值是水平位置，第二个值是垂直位置。</p>\n        <p>左上角是 0 0。单位是像素 (0px 0px) 或任何其他的 CSS 单位。</p>\n        <p>如果您仅规定了一个值，另一个值将是50%。</p>\n        <p>您可以混合使用 % 和 position 值。</p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n## 尺寸相关\n\n### 宽度\n\n```css\nwidth:100px;\n```\n\n## 鼠标相关\n\n一般搭配伪类使用\n\n### 鼠标悬停样式\n\n| 值         | 描述                                                |\n| ---------- | --------------------------------------------------- |\n| url        | 想传送的url                                         |\n| default    | 默认光标（通常是一个箭头）                          |\n| auto       | 默认。浏览器设置的光标。                            |\n| crosshair  | 光标呈现为十字线。                                  |\n| pointer    | 光标呈现为指示链接的指针（一只手）                  |\n| move       | 此光标指示某对象可被移动。                          |\n| e-resize  | 此光标指示矩形框的边缘可被向右（东）移动。          |\n| ne-resize | 此光标指示矩形框的边缘可被向上及向右移动（北/东）。 |\n| nw-resize | 此光标指示矩形框的边缘可被向上及向左移动（北/西）。 |\n| n-resize  | 此光标指示矩形框的边缘可被向上（北）移动。          |\n| se-resize | 此光标指示矩形框的边缘可被向下及向右移动（南/东）。 |\n| sw-resize | 此光标指示矩形框的边缘可被向下及向左移动（南/西）。 |\n| s-resize  | 此光标指示矩形框的边缘可被向下移动（南）。          |\n| w-resize  | 此光标指示矩形框的边缘可被向左移动（西）。          |\n| text       | 此光标指示文本。                                    |\n| wait       | 此光标指示程序正忙（通常是一只表或沙漏）。          |\n| help       | 此光标指示可用的帮助（通常是一个问号或一个气球）。  |\n\n## 其他常用样式\n\n### 透明\n\n请设置在[0-1]之间\n\n```css\nopacity: 值;\n```\n\n### 圆角\n\n```css\n/*默认全部角*/\nborder-radius: 25px;\n/*分别设置*/\nborder-radius: 15px 50px 30px 5px:\n```\n\n\n\n# 盒模型\n\n## 概述\n\n盒模型相关的样式包括:\n\n- 内外边距\n- 边框\n\nCSS认为,每一个文档的元素都是一个盒子,这个盒子包括自身的大小,边框大小,内边距和外边距.如下图:\n\n![CSS 框模型](img/ct_boxmodel.gif)\n\n如果在浏览器(以chrome为例)里面用开发者工具查看,可以发现,实际上内外边距,外边距还有边框都是占地方的,\n\n```css\np{\n  border: #ADFF2F 10px solid;\n  padding: 20px;\n  margin: 30px;\n  width: 50px;\n  height: 50px;\n}\n```\n\n![image-20200913130056030](img/image-20200913130056030.png)\n\n![image-20200913130003875](img/image-20200913130003875.png)\n\n这些样式的区别就在于,内边距是算在元素本身的大小里面的,啥意思呢,就比如你元素宽20px,内边距你两边各加10px,那么你这个元素整体就宽40px.边框也是一样的,但是外边距不会算在元素里面.\n\n## 边框\n\n### 概述\n\n一个元素有上下左右四个边框(废话),css允许分别定义各个方向上边框的样式.比如说\n\n```css\nborder-color:red green blue pink;\n```\n\n分别为上,右,下,左指定不同颜色.也就是从上开始,顺时针排列.\n\n<p style="border-style:solid; border-color:red green blue pink;border-width:5px;width:100px;height:100px"></p>\n\n\n```css\nborder-color:red green blue;\n```\n\n如果只写三个,那么第一个是上边框,第二个是左右边框,第三个是下边框.\n\n<p style="border-style:solid; border-color:red green blue;border-width:5px;width:100px;height:100px"></p>\n\n```css\nborder-color:red green;\n```\n\n只写两个的话就是上下边框,左右边框\n\n<p style="border-style:solid; border-color:red green;border-width:5px;width:100px;height:100px"></p>\n\n```\nborder-color:red;\n```\n\n一个的话肯定就是全部红喽;\n\n<p style="border-style:solid; border-color:red;border-width:5px;width:100px;height:100px"></p>\n\n这样分别指定样式的操作,在边框里面是通用的,也可以来指定宽度,表现等.如果不想这样隐式指定,也可以显示指定.\n\n```css\nborder-top-width: 15px;\nborder-right-color: blue;\nborder-left-style: solid;\nborder-bottom-color: red;\n```\n\n像这样子,直接指定也是可以的.\n\n**注意:!!!!!!!!!!!!!!只有把width,style和color都指定了之后才能正常显示边框,否则不会显示!!!!!!!!!!!!!!!!!!.**\n\n### 边框表现\n\n```css\nborder-style:solid;\n```\n\n| 值      | 描述                                                         |\n| ------- | ------------------------------------------------------------ |\n| none    | 定义无边框。                                                 |\n| hidden  | 与 "none" 相同。不过应用于表时除外，对于表，hidden 用于解决边框冲突。 |\n| dotted  | 定义点状边框。在大多数浏览器中呈现为实线。                   |\n| dashed  | 定义虚线。在大多数浏览器中呈现为实线。                       |\n| solid   | 定义实线。                                                   |\n| double  | 定义双线。双线的宽度等于 border-width 的值。                |\n| groove  | 定义 3D 凹槽边框。其效果取决于 border-color 的值。          |\n| ridge   | 定义 3D 垄状边框。其效果取决于 border-color 的值。          |\n| inset   | 定义 3D inset 边框。其效果取决于 border-color 的值。        |\n| outset  | 定义 3D outset 边框。其效果取决于 border-color 的值。       |\n| inherit | 规定应该从父元素继承边框样式。                               |\n\n### 边框宽度\n\n```css\nborder-width:20px;\n```\n\n| 值      | 描述                           |\n| ------- | ------------------------------ |\n| thin    | 定义细的边框。                 |\n| medium  | 默认。定义中等的边框。         |\n| thick   | 定义粗的边框。                 |\n| 某某px  | 自定义宽度                     |\n| inherit | 规定应该从父元素继承边框宽度。 |\n\n### 边框颜色\n\n```css\nborder-color:red green blue pink;\n```\n\n跟字体颜色一样,详情参考颜色表.\n\n### 简写\n\n因为边框想要生效必须指定三个属性,写起来确实很麻烦,为了增加程序员的寿命,HTML支持边框的简写\n\n```css\nborder:5px solid red;\n```\n\n像这样,可以一次性设置三个属性.\n\n# 选择器\n\n## *选择器\n\n就是全选的意思,选中html文档中所有的元素.\n\n```css\n*{\n  margin:0;\n  padding:0;\n}\n```\n\n## 元素选择器\n\n可以直接选择某一个标签,然后直接对HTML中所有这种标签进行批量编辑.\n\n```css\np{\n  color:red;\n}\n```\n\n这个就是让所有p标签内部文字颜色变为红色.\n\n## 类选择器\n\n可以批量选择自定义的类,用于某一类特定的标签.\n\nhtml:\n\n```html\n<ul>\n  <li class="item">java</li>\n  <li class="item">c#</li>\n  <li class="item">sql</li>\n  <li class="item">css</li>\n</ul>\n```\n\ncss:\n\n```html\n<style type="text/css">\n\t.item{\n\t\tcolor:blue\n\t}\n</style>\n```\n\n一般类选择器选择的都是某一类标签,在需要添加这个类的标签前面加上`class`,后面可以指定想要的类,类名可以随便起.在css里面用点类名的办法,选择所有该类.\n\n一般来说,类选择器都是批量选择很多该类的标签,比如说ul的列表,li有很多很多条,为每一个li单独设计样式岂不是累死了,所以可以给他们起一个类名item,批量添加这些li的样式.\n\n## ID选择器\n\n只能选择某一个特定的标签,一般只有一些特殊含义的标签才用起ID.还是刚才的例子.\n\nhtml:\n\n```html\n<ul id="language-list">\n  <li class="item">java</li>\n  <li class="item">c#</li>\n  <li class="item">sql</li>\n  <li class="item">css</li>\n</ul>\n```\n\ncss:\n\n```html\n<style type="text/css">\n\t#language-list{\n\t\tcolor:blue\n\t}\n</style>\n```\n\nID选择器中,css用#加ID名就可以选中标签,一般一个网页里面这个语言列表可能就这么一个,所以比较特殊,可以用ID选择器来选中,直接操作这个标签.\n\n## 伪类选择器\n\n名字虽然很酷,其实没那么复杂,这个玩意可以来操作一些特殊的类,比如超链接的样式,输入框聚焦后的样式等等.写法就是在需要添加的元素后面冒号,然后加入想加入的伪类即可.\n\n### 超链接相关\n\n```css\na:link {color: #FF0000}\t\t/* 未被访问的超链接 */\na:visited {color: #00FF00}\t/* 已访问的链接 */\na:hover {color: #FF00FF}\t/* 鼠标移动到超链接上的时候 */\na:active {color: #0000FF}\t/* 鼠标点下去的一瞬间 */\n```\n\n### first-child\n\n顾名思义,就是选择第一个子元素,但是这里面有很多坑,必须注意\n\n先看html:\n\n```HTML\n<p><span>我是span</span>我是p</p>\n<p><span>我是span</span>我是p</p>\n```\n\n\n\n- 选择所有p标签中,第一个p标签\n\n```css\np:first-child{\n  color: red;\n} \n```\n\n![image-20200913141409114](img/image-20200913141409114.png)\n\n- 选择所有p标签内部第一个子元素\n\n```css\np>:first-child {\n\tcolor: red;\n}\n```\n\n![image-20200913141347709](img/image-20200913141347709.png)\n\n### before和after\n\n可以用这两个伪类,在某个元素前面或后面插入文本.用content来控制文本内容.\n\n```css\np:before\n{\n\tcontent:"我是before加的";\n}\np:after\n{\n\tcontent:"我是after加的";\n}\n```\n\n\n\n## 并集选择器\n\n如果你想同时给多个不同元素设置样式,可以用并集选择器\n\n```css\nbody, h2, p, table, th, td, pre, strong, em {color:gray;}\n```\n\n像这样,彼此之间用逗号隔开,表示同时选中.\n\n## 属性选择器\n\n如果你想选择带某个属性的标签,可以用属性选择器.但是里面也有很多坑,需要注意.\n\n- 指定某种属性\n\n```css\na[href] {color:red;}\n```\n\n这个例子就是选择所有有href属性的a标签.也可以同时指定多个属性:\n\n- 指定同时具有多种属性\n\n```css\na[href][title] {color:red;}\n```\n\n这个就是选择同是有href和title属性的a标签\n\n- 精确指定某个具体属性\n\n```css\np[class="A B"] {color:red;}\n```\n\n选择某个有具体属性的标签,注意这个要求严格等于,也就是说你的class也必须是"A B",多一个空格都不行.这时候我们就可以使用下面的写法了.\n\n- 含有某种属性\n\n```css\np[class~="A"] {color: red;}\n```\n\n用这个~可以表示含有A的class,不用严格匹配.\n\n属性选择器也支持三种正则语法:\n\n- 包含某字符串的属性\n\n```css\na[href*="dashepi.com"] {color: red;}\n```\n\n选择a标签的超链接中包含"dashepi.com"这个字符串的所有a标签\n\n- 以某字符串开头的属性\n\n```css\na[href^="www."] {color: red;}\n```\n\n选择href以"www."开头的a标签\n\n- 以某字符串结尾的属性\n\n```css\na[href$=".cn"] {color: red;}\n```\n\n选择href以".cn"结尾的a标签\n\n# 定位与浮动\n\n## 外边距重叠\n\n## 高度塌陷\n\n## 最终解决代码\n\n```css\n.clearfix::before,\n.clearfix::after{\n  content: "";\n  display: table;\n  clear: both;\n}\n```\n\n\n\n# flex布局\n\n传统的网页布局是靠 [`display`](https://developer.mozilla.org/en-US/docs/Web/CSS/display) 属性 + [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position)属性 + [`float`](https://developer.mozilla.org/en-US/docs/Web/CSS/float)属性完成的，不仅难用，而且bug频出。后来W3C忽悠引出了flex布局，用于替代传统布局。\n\nflex布局核心就在于属性的使用。\n\n- flex-direction：决定元素排列方向\n- flex-wrap：控制换行\n- justify-content：横向对齐方式\n- align-items：竖向对齐方式\n- align-content：控制多轴下的对齐方式\n\n注意，一旦使用了flex布局，子元素的`float`、`clear`和`vertical-align`属性将失效。\n\n## flex-direction\n\n| 值             | 作用                         |\n| -------------- | ---------------------------- |\n| row            | 主轴为水平方向，起点在左端。 |\n| row-reverse    | 主轴为水平方向，起点在右端。 |\n| column         | 主轴为垂直方向，起点在上沿。 |\n| column-reverse | 主轴为垂直方向，起点在下沿。 |\n\n子元素垂直水平居中\n\n```css\ndisplay: flex;\nalign-items:center;  \njustify-content:center;\n```\n\n\n\n# 实用技巧\n\n## 设置长宽相等\n\n- (根据宽度设置高度)如果确定width:100%;则设置高度 height: 100vw;\n\n- (根据高度设置宽度)如果确定高度height:100%;则设置 width: 100vh;\n\n- (根据宽度设置高度)如果确定width:60%;则设置高度 height: 60vw;\n\n- (根据高度设置宽度)如果确定高度height:60%;则设置 width: 60vh;\n\n- ```css\n  width: 20%;\n  height: 20vw;\n  ```\n\n## 设置标签水平垂直居中\n\n```css\n父元素{\n  display: flex;\n}\n\n子元素{\n  /*水平居中*/\n  margin: 0 auto;\n  /*垂直居中*/\n  align-self: center;\n}\n```\n'),c={components:{MarkdownItVue:s.a},data:function(){return{content:l}}},d=c,a=t("2877"),p=Object(a["a"])(d,r,o,!1,null,null,null);e["default"]=p.exports}}]);
//# sourceMappingURL=chunk-2d210247.e51a172b.js.map