{"version":3,"sources":["webpack:///./src/views/Computer/CSS/CSS.vue?371b","webpack:///./src/views/Computer/CSS/CSS.js","webpack:///src/views/Computer/CSS/CSS.vue","webpack:///./src/views/Computer/CSS/CSS.vue?f470","webpack:///./src/views/Computer/CSS/CSS.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","content","staticRenderFns","components","MarkdownItVue","data","component"],"mappings":"uHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACA,EAAG,kBAAkB,CAACE,YAAY,UAAUC,MAAM,CAAC,QAAUP,EAAIQ,YAAY,IACnLC,EAAkB,G,qBCDP,G,UAAA,4yXCUf,GACEC,WAAY,CACVC,cAAJ,KAEEC,KAJF,WAKI,MAAO,CACX,aChB2W,I,YCOvWC,EAAY,eACd,EACAd,EACAU,GACA,EACA,KACA,KACA,MAIa,aAAAI,E","file":"js/chunk-2d210247.e51a172b.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('markdown-it-vue',{staticClass:\"md-body\",attrs:{\"content\":_vm.content}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export default \r\n`\r\n# 基本样式\r\n\r\n## 文字相关\r\n\r\n### 文字颜色\r\n\r\n\\`\\`\\`css\r\ncolor: black;\r\n\\`\\`\\`\r\n\r\n颜色请参考我的颜色对照表\r\n\r\n### 文本对齐\r\n\r\n\\`\\`\\`css\r\ntext-align:center;\r\n\\`\\`\\`\r\n\r\n| 值      | 描述                                        |\r\n| ------- | ------------------------------------------- |\r\n| left    | 把文本排列到左边。                          |\r\n| right   | 把文本排列到右边。                          |\r\n| center  | 把文本排列到中间。                          |\r\n| justify | 实现两端对齐文本效果。                      |\r\n| inherit | 规定应该从父元素继承 text\\-align 属性的值。 |\r\n\r\n### 下划线\r\n\r\n\\`\\`\\`css\r\ntext-decoration:none;\r\n\\`\\`\\`\r\n\r\n| 值            | 描述                                             |\r\n| ------------- | ------------------------------------------------ |\r\n| none          | 默认。定义标准的文本。                           |\r\n| underline     | 定义文本下的一条线。                             |\r\n| overline      | 定义文本上的一条线。                             |\r\n| line\\-through | 定义穿过文本下的一条线。                         |\r\n| blink         | 定义闪烁的文本。                                 |\r\n| inherit       | 规定应该从父元素继承 text\\-decoration 属性的值。 |\r\n\r\n### 行高\r\n\r\n\\`\\`\\`css\r\nline-height:20px;\r\n\\`\\`\\`\r\n\r\n| 值      | 描述                                                 |\r\n| ------- | ---------------------------------------------------- |\r\n| normal  | 默认。设置合理的行间距。                             |\r\n| 某数字  | 设置数字，此数字会与当前的字体尺寸相乘来设置行间距。 |\r\n| 某某px  | 设置固定的行间距。                                   |\r\n| %       | 基于当前字体尺寸的百分比行间距。                     |\r\n| inherit | 规定应该从父元素继承 line\\-height 属性的值。         |\r\n\r\n### 文字阴影\r\n\r\n\\`\\`\\`css\r\ntext-shadow: 10px 5px 2px #FF0000;\r\n\\`\\`\\`\r\n\r\n| 参数       | 描述                                   |\r\n| ---------- | -------------------------------------- |\r\n| 第一个参数 | 必需。阴影离文字的水平距离。允许负值。 |\r\n| 第二个参数 | 必需。阴影离文字的垂直距离。允许负值。 |\r\n| 第三个参数 | 可选。代表这个阴影有多模糊。           |\r\n| 第四个参数 | 可选。阴影的颜色。                     |\r\n\r\n## 背景相关\r\n\r\n### 背景颜色\r\n\r\n\\`\\`\\`css\r\nbackground-color: gray;\r\nbackground-color: #bfc;\r\n\\`\\`\\`\r\n\r\n### 背景图片\r\n\r\n\\`\\`\\`css\r\nbackground-image:url(\"\");\r\n\\`\\`\\`\r\n\r\n### 背景图片重复\r\n\r\n\\`\\`\\`css\r\nbackground-repeat:no-repeat;\r\n\\`\\`\\`\r\n\r\n| 值         | 描述                                                 |\r\n| ---------- | ---------------------------------------------------- |\r\n| repeat     | 默认。背景图像将在垂直方向和水平方向重复。           |\r\n| repeat\\-x  | 背景图像将在水平方向重复。                           |\r\n| repeat\\-y  | 背景图像将在垂直方向重复。                           |\r\n| no\\-repeat | 背景图像将仅显示一次。                               |\r\n| inherit    | 规定应该从父元素继承 background\\-repeat 属性的设置。 |\r\n\r\n\r\n### 背景开始的位置\r\n\r\n设置background-attachment:fixed;才能兼容 Firefox 和 Opera 浏览器\r\n\r\n\\`\\`\\`css\r\nbackground-attachment:fixed;\r\nbackground-position:center;\r\n\\`\\`\\`\r\n\r\n<table>\r\n  <tbody>\r\n    <tr>\r\n      <th>值</th>\r\n      <th>描述</th>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        <ul>\r\n          <li>top left</li>\r\n          <li>top center</li>\r\n          <li>top right</li>\r\n          <li>center left</li>\r\n          <li>center center</li>\r\n          <li>center right</li>\r\n          <li>bottom left</li>\r\n          <li>bottom center</li>\r\n          <li>bottom right</li>\r\n        </ul>\r\n      </td>\r\n      <td>\r\n        <p>如果您仅规定了一个关键词，那么第二个值将是\"center\"。</p>\r\n        <p>默认值：0% 0%。</p>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>x% y%</td>\r\n      <td>\r\n        <p>第一个值是水平位置，第二个值是垂直位置。</p>\r\n        <p>左上角是 0% 0%。右下角是 100% 100%。</p>\r\n        <p>如果您仅规定了一个值，另一个值将是 50%。</p>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>xpos ypos</td>\r\n      <td>\r\n        <p>第一个值是水平位置，第二个值是垂直位置。</p>\r\n        <p>左上角是 0 0。单位是像素 (0px 0px) 或任何其他的 CSS 单位。</p>\r\n        <p>如果您仅规定了一个值，另一个值将是50%。</p>\r\n        <p>您可以混合使用 % 和 position 值。</p>\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n## 尺寸相关\r\n\r\n### 宽度\r\n\r\n\\`\\`\\`css\r\nwidth:100px;\r\n\\`\\`\\`\r\n\r\n## 鼠标相关\r\n\r\n一般搭配伪类使用\r\n\r\n### 鼠标悬停样式\r\n\r\n| 值         | 描述                                                |\r\n| ---------- | --------------------------------------------------- |\r\n| url        | 想传送的url                                         |\r\n| default    | 默认光标（通常是一个箭头）                          |\r\n| auto       | 默认。浏览器设置的光标。                            |\r\n| crosshair  | 光标呈现为十字线。                                  |\r\n| pointer    | 光标呈现为指示链接的指针（一只手）                  |\r\n| move       | 此光标指示某对象可被移动。                          |\r\n| e\\-resize  | 此光标指示矩形框的边缘可被向右（东）移动。          |\r\n| ne\\-resize | 此光标指示矩形框的边缘可被向上及向右移动（北/东）。 |\r\n| nw\\-resize | 此光标指示矩形框的边缘可被向上及向左移动（北/西）。 |\r\n| n\\-resize  | 此光标指示矩形框的边缘可被向上（北）移动。          |\r\n| se\\-resize | 此光标指示矩形框的边缘可被向下及向右移动（南/东）。 |\r\n| sw\\-resize | 此光标指示矩形框的边缘可被向下及向左移动（南/西）。 |\r\n| s\\-resize  | 此光标指示矩形框的边缘可被向下移动（南）。          |\r\n| w\\-resize  | 此光标指示矩形框的边缘可被向左移动（西）。          |\r\n| text       | 此光标指示文本。                                    |\r\n| wait       | 此光标指示程序正忙（通常是一只表或沙漏）。          |\r\n| help       | 此光标指示可用的帮助（通常是一个问号或一个气球）。  |\r\n\r\n## 其他常用样式\r\n\r\n### 透明\r\n\r\n请设置在[0-1]之间\r\n\r\n\\`\\`\\`css\r\nopacity: 值;\r\n\\`\\`\\`\r\n\r\n### 圆角\r\n\r\n\\`\\`\\`css\r\n/*默认全部角*/\r\nborder-radius: 25px;\r\n/*分别设置*/\r\nborder-radius: 15px 50px 30px 5px:\r\n\\`\\`\\`\r\n\r\n\r\n\r\n# 盒模型\r\n\r\n## 概述\r\n\r\n盒模型相关的样式包括:\r\n\r\n- 内外边距\r\n- 边框\r\n\r\nCSS认为,每一个文档的元素都是一个盒子,这个盒子包括自身的大小,边框大小,内边距和外边距.如下图:\r\n\r\n![CSS 框模型](img/ct_boxmodel.gif)\r\n\r\n如果在浏览器(以chrome为例)里面用开发者工具查看,可以发现,实际上内外边距,外边距还有边框都是占地方的,\r\n\r\n\\`\\`\\`css\r\np{\r\n  border: #ADFF2F 10px solid;\r\n  padding: 20px;\r\n  margin: 30px;\r\n  width: 50px;\r\n  height: 50px;\r\n}\r\n\\`\\`\\`\r\n\r\n![image-20200913130056030](img/image-20200913130056030.png)\r\n\r\n![image-20200913130003875](img/image-20200913130003875.png)\r\n\r\n这些样式的区别就在于,内边距是算在元素本身的大小里面的,啥意思呢,就比如你元素宽20px,内边距你两边各加10px,那么你这个元素整体就宽40px.边框也是一样的,但是外边距不会算在元素里面.\r\n\r\n## 边框\r\n\r\n### 概述\r\n\r\n一个元素有上下左右四个边框(废话),css允许分别定义各个方向上边框的样式.比如说\r\n\r\n\\`\\`\\`css\r\nborder-color:red green blue pink;\r\n\\`\\`\\`\r\n\r\n分别为上,右,下,左指定不同颜色.也就是从上开始,顺时针排列.\r\n\r\n<p style=\"border-style:solid; border-color:red green blue pink;border-width:5px;width:100px;height:100px\"></p>\r\n\r\n\r\n\\`\\`\\`css\r\nborder-color:red green blue;\r\n\\`\\`\\`\r\n\r\n如果只写三个,那么第一个是上边框,第二个是左右边框,第三个是下边框.\r\n\r\n<p style=\"border-style:solid; border-color:red green blue;border-width:5px;width:100px;height:100px\"></p>\r\n\r\n\\`\\`\\`css\r\nborder-color:red green;\r\n\\`\\`\\`\r\n\r\n只写两个的话就是上下边框,左右边框\r\n\r\n<p style=\"border-style:solid; border-color:red green;border-width:5px;width:100px;height:100px\"></p>\r\n\r\n\\`\\`\\`\r\nborder-color:red;\r\n\\`\\`\\`\r\n\r\n一个的话肯定就是全部红喽;\r\n\r\n<p style=\"border-style:solid; border-color:red;border-width:5px;width:100px;height:100px\"></p>\r\n\r\n这样分别指定样式的操作,在边框里面是通用的,也可以来指定宽度,表现等.如果不想这样隐式指定,也可以显示指定.\r\n\r\n\\`\\`\\`css\r\nborder-top-width: 15px;\r\nborder-right-color: blue;\r\nborder-left-style: solid;\r\nborder-bottom-color: red;\r\n\\`\\`\\`\r\n\r\n像这样子,直接指定也是可以的.\r\n\r\n**注意:!!!!!!!!!!!!!!只有把width,style和color都指定了之后才能正常显示边框,否则不会显示!!!!!!!!!!!!!!!!!!.**\r\n\r\n### 边框表现\r\n\r\n\\`\\`\\`css\r\nborder-style:solid;\r\n\\`\\`\\`\r\n\r\n| 值      | 描述                                                         |\r\n| ------- | ------------------------------------------------------------ |\r\n| none    | 定义无边框。                                                 |\r\n| hidden  | 与 \"none\" 相同。不过应用于表时除外，对于表，hidden 用于解决边框冲突。 |\r\n| dotted  | 定义点状边框。在大多数浏览器中呈现为实线。                   |\r\n| dashed  | 定义虚线。在大多数浏览器中呈现为实线。                       |\r\n| solid   | 定义实线。                                                   |\r\n| double  | 定义双线。双线的宽度等于 border\\-width 的值。                |\r\n| groove  | 定义 3D 凹槽边框。其效果取决于 border\\-color 的值。          |\r\n| ridge   | 定义 3D 垄状边框。其效果取决于 border\\-color 的值。          |\r\n| inset   | 定义 3D inset 边框。其效果取决于 border\\-color 的值。        |\r\n| outset  | 定义 3D outset 边框。其效果取决于 border\\-color 的值。       |\r\n| inherit | 规定应该从父元素继承边框样式。                               |\r\n\r\n### 边框宽度\r\n\r\n\\`\\`\\`css\r\nborder-width:20px;\r\n\\`\\`\\`\r\n\r\n| 值      | 描述                           |\r\n| ------- | ------------------------------ |\r\n| thin    | 定义细的边框。                 |\r\n| medium  | 默认。定义中等的边框。         |\r\n| thick   | 定义粗的边框。                 |\r\n| 某某px  | 自定义宽度                     |\r\n| inherit | 规定应该从父元素继承边框宽度。 |\r\n\r\n### 边框颜色\r\n\r\n\\`\\`\\`css\r\nborder-color:red green blue pink;\r\n\\`\\`\\`\r\n\r\n跟字体颜色一样,详情参考颜色表.\r\n\r\n### 简写\r\n\r\n因为边框想要生效必须指定三个属性,写起来确实很麻烦,为了增加程序员的寿命,HTML支持边框的简写\r\n\r\n\\`\\`\\`css\r\nborder:5px solid red;\r\n\\`\\`\\`\r\n\r\n像这样,可以一次性设置三个属性.\r\n\r\n# 选择器\r\n\r\n## *选择器\r\n\r\n就是全选的意思,选中html文档中所有的元素.\r\n\r\n\\`\\`\\`css\r\n*{\r\n  margin:0;\r\n  padding:0;\r\n}\r\n\\`\\`\\`\r\n\r\n## 元素选择器\r\n\r\n可以直接选择某一个标签,然后直接对HTML中所有这种标签进行批量编辑.\r\n\r\n\\`\\`\\`css\r\np{\r\n  color:red;\r\n}\r\n\\`\\`\\`\r\n\r\n这个就是让所有p标签内部文字颜色变为红色.\r\n\r\n## 类选择器\r\n\r\n可以批量选择自定义的类,用于某一类特定的标签.\r\n\r\nhtml:\r\n\r\n\\`\\`\\`html\r\n<ul>\r\n  <li class=\"item\">java</li>\r\n  <li class=\"item\">c#</li>\r\n  <li class=\"item\">sql</li>\r\n  <li class=\"item\">css</li>\r\n</ul>\r\n\\`\\`\\`\r\n\r\ncss:\r\n\r\n\\`\\`\\`html\r\n<style type=\"text/css\">\r\n\t.item{\r\n\t\tcolor:blue\r\n\t}\r\n</style>\r\n\\`\\`\\`\r\n\r\n一般类选择器选择的都是某一类标签,在需要添加这个类的标签前面加上\\`class\\`,后面可以指定想要的类,类名可以随便起.在css里面用点类名的办法,选择所有该类.\r\n\r\n一般来说,类选择器都是批量选择很多该类的标签,比如说ul的列表,li有很多很多条,为每一个li单独设计样式岂不是累死了,所以可以给他们起一个类名item,批量添加这些li的样式.\r\n\r\n## ID选择器\r\n\r\n只能选择某一个特定的标签,一般只有一些特殊含义的标签才用起ID.还是刚才的例子.\r\n\r\nhtml:\r\n\r\n\\`\\`\\`html\r\n<ul id=\"language-list\">\r\n  <li class=\"item\">java</li>\r\n  <li class=\"item\">c#</li>\r\n  <li class=\"item\">sql</li>\r\n  <li class=\"item\">css</li>\r\n</ul>\r\n\\`\\`\\`\r\n\r\ncss:\r\n\r\n\\`\\`\\`html\r\n<style type=\"text/css\">\r\n\t#language-list{\r\n\t\tcolor:blue\r\n\t}\r\n</style>\r\n\\`\\`\\`\r\n\r\nID选择器中,css用#加ID名就可以选中标签,一般一个网页里面这个语言列表可能就这么一个,所以比较特殊,可以用ID选择器来选中,直接操作这个标签.\r\n\r\n## 伪类选择器\r\n\r\n名字虽然很酷,其实没那么复杂,这个玩意可以来操作一些特殊的类,比如超链接的样式,输入框聚焦后的样式等等.写法就是在需要添加的元素后面冒号,然后加入想加入的伪类即可.\r\n\r\n### 超链接相关\r\n\r\n\\`\\`\\`css\r\na:link {color: #FF0000}\t\t/* 未被访问的超链接 */\r\na:visited {color: #00FF00}\t/* 已访问的链接 */\r\na:hover {color: #FF00FF}\t/* 鼠标移动到超链接上的时候 */\r\na:active {color: #0000FF}\t/* 鼠标点下去的一瞬间 */\r\n\\`\\`\\`\r\n\r\n### first-child\r\n\r\n顾名思义,就是选择第一个子元素,但是这里面有很多坑,必须注意\r\n\r\n先看html:\r\n\r\n\\`\\`\\`HTML\r\n<p><span>我是span</span>我是p</p>\r\n<p><span>我是span</span>我是p</p>\r\n\\`\\`\\`\r\n\r\n\r\n\r\n- 选择所有p标签中,第一个p标签\r\n\r\n\\`\\`\\`css\r\np:first-child{\r\n  color: red;\r\n} \r\n\\`\\`\\`\r\n\r\n![image-20200913141409114](img/image-20200913141409114.png)\r\n\r\n- 选择所有p标签内部第一个子元素\r\n\r\n\\`\\`\\`css\r\np>:first-child {\r\n\tcolor: red;\r\n}\r\n\\`\\`\\`\r\n\r\n![image-20200913141347709](img/image-20200913141347709.png)\r\n\r\n### before和after\r\n\r\n可以用这两个伪类,在某个元素前面或后面插入文本.用content来控制文本内容.\r\n\r\n\\`\\`\\`css\r\np:before\r\n{\r\n\tcontent:\"我是before加的\";\r\n}\r\np:after\r\n{\r\n\tcontent:\"我是after加的\";\r\n}\r\n\\`\\`\\`\r\n\r\n\r\n\r\n## 并集选择器\r\n\r\n如果你想同时给多个不同元素设置样式,可以用并集选择器\r\n\r\n\\`\\`\\`css\r\nbody, h2, p, table, th, td, pre, strong, em {color:gray;}\r\n\\`\\`\\`\r\n\r\n像这样,彼此之间用逗号隔开,表示同时选中.\r\n\r\n## 属性选择器\r\n\r\n如果你想选择带某个属性的标签,可以用属性选择器.但是里面也有很多坑,需要注意.\r\n\r\n- 指定某种属性\r\n\r\n\\`\\`\\`css\r\na[href] {color:red;}\r\n\\`\\`\\`\r\n\r\n这个例子就是选择所有有href属性的a标签.也可以同时指定多个属性:\r\n\r\n- 指定同时具有多种属性\r\n\r\n\\`\\`\\`css\r\na[href][title] {color:red;}\r\n\\`\\`\\`\r\n\r\n这个就是选择同是有href和title属性的a标签\r\n\r\n- 精确指定某个具体属性\r\n\r\n\\`\\`\\`css\r\np[class=\"A B\"] {color:red;}\r\n\\`\\`\\`\r\n\r\n选择某个有具体属性的标签,注意这个要求严格等于,也就是说你的class也必须是\"A B\",多一个空格都不行.这时候我们就可以使用下面的写法了.\r\n\r\n- 含有某种属性\r\n\r\n\\`\\`\\`css\r\np[class~=\"A\"] {color: red;}\r\n\\`\\`\\`\r\n\r\n用这个~可以表示含有A的class,不用严格匹配.\r\n\r\n属性选择器也支持三种正则语法:\r\n\r\n- 包含某字符串的属性\r\n\r\n\\`\\`\\`css\r\na[href*=\"dashepi.com\"] {color: red;}\r\n\\`\\`\\`\r\n\r\n选择a标签的超链接中包含\"dashepi.com\"这个字符串的所有a标签\r\n\r\n- 以某字符串开头的属性\r\n\r\n\\`\\`\\`css\r\na[href^=\"www.\"] {color: red;}\r\n\\`\\`\\`\r\n\r\n选择href以\"www.\"开头的a标签\r\n\r\n- 以某字符串结尾的属性\r\n\r\n\\`\\`\\`css\r\na[href$=\".cn\"] {color: red;}\r\n\\`\\`\\`\r\n\r\n选择href以\".cn\"结尾的a标签\r\n\r\n# 定位与浮动\r\n\r\n## 外边距重叠\r\n\r\n## 高度塌陷\r\n\r\n## 最终解决代码\r\n\r\n\\`\\`\\`css\r\n.clearfix::before,\r\n.clearfix::after{\r\n  content: \"\";\r\n  display: table;\r\n  clear: both;\r\n}\r\n\\`\\`\\`\r\n\r\n\r\n\r\n# flex布局\r\n\r\n传统的网页布局是靠 [\\`display\\`](https://developer.mozilla.org/en-US/docs/Web/CSS/display) 属性 + [\\`position\\`](https://developer.mozilla.org/en-US/docs/Web/CSS/position)属性 + [\\`float\\`](https://developer.mozilla.org/en-US/docs/Web/CSS/float)属性完成的，不仅难用，而且bug频出。后来W3C忽悠引出了flex布局，用于替代传统布局。\r\n\r\nflex布局核心就在于属性的使用。\r\n\r\n- flex-direction：决定元素排列方向\r\n- flex-wrap：控制换行\r\n- justify-content：横向对齐方式\r\n- align-items：竖向对齐方式\r\n- align-content：控制多轴下的对齐方式\r\n\r\n注意，一旦使用了flex布局，子元素的\\`float\\`、\\`clear\\`和\\`vertical-align\\`属性将失效。\r\n\r\n## flex-direction\r\n\r\n| 值             | 作用                         |\r\n| -------------- | ---------------------------- |\r\n| row            | 主轴为水平方向，起点在左端。 |\r\n| row-reverse    | 主轴为水平方向，起点在右端。 |\r\n| column         | 主轴为垂直方向，起点在上沿。 |\r\n| column-reverse | 主轴为垂直方向，起点在下沿。 |\r\n\r\n子元素垂直水平居中\r\n\r\n\\`\\`\\`css\r\ndisplay: flex;\r\nalign-items:center;  \r\njustify-content:center;\r\n\\`\\`\\`\r\n\r\n\r\n\r\n# 实用技巧\r\n\r\n## 设置长宽相等\r\n\r\n- (根据宽度设置高度)如果确定width:100%;则设置高度 height: 100vw;\r\n\r\n- (根据高度设置宽度)如果确定高度height:100%;则设置 width: 100vh;\r\n\r\n- (根据宽度设置高度)如果确定width:60%;则设置高度 height: 60vw;\r\n\r\n- (根据高度设置宽度)如果确定高度height:60%;则设置 width: 60vh;\r\n\r\n- \\`\\`\\`css\r\n  width: 20%;\r\n  height: 20vw;\r\n  \\`\\`\\`\r\n\r\n## 设置标签水平垂直居中\r\n\r\n\\`\\`\\`css\r\n父元素{\r\n  display: flex;\r\n}\r\n\r\n子元素{\r\n  /*水平居中*/\r\n  margin: 0 auto;\r\n  /*垂直居中*/\r\n  align-self: center;\r\n}\r\n\\`\\`\\`\r\n`\r\n","<template>\r\n  <div>\r\n    <markdown-it-vue class=\"md-body\" :content=\"content\"/>\r\n  </div>\r\n</template>\r\n \r\n<script>\r\nimport MarkdownItVue from 'markdown-it-vue'\r\nimport 'markdown-it-vue/dist/markdown-it-vue.css'\r\nimport MdFile from \"./CSS.js\"\r\nexport default {\r\n  components: {\r\n    MarkdownItVue\r\n  },\r\n  data () {\r\n    return {\r\n\t\t\tcontent: MdFile\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\t\r\n</style>","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CSS.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CSS.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./CSS.vue?vue&type=template&id=dfec1b04&\"\nimport script from \"./CSS.vue?vue&type=script&lang=js&\"\nexport * from \"./CSS.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}